/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VOTINGDAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_POOL_DISCRIMINATOR = new Uint8Array([
  95, 180, 10, 172, 84, 174, 232, 40,
]);

export function getInitializePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POOL_DISCRIMINATOR
  );
}

export type InitializePoolInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  poolId: bigint;
  description: string;
  poolStart: bigint;
  poolEnd: bigint;
};

export type InitializePoolInstructionDataArgs = {
  poolId: number | bigint;
  description: string;
  poolStart: number | bigint;
  poolEnd: number | bigint;
};

export function getInitializePoolInstructionDataEncoder(): Encoder<InitializePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolId', getU64Encoder()],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['poolStart', getU64Encoder()],
      ['poolEnd', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_POOL_DISCRIMINATOR })
  );
}

export function getInitializePoolInstructionDataDecoder(): Decoder<InitializePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolId', getU64Decoder()],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['poolStart', getU64Decoder()],
    ['poolEnd', getU64Decoder()],
  ]);
}

export function getInitializePoolInstructionDataCodec(): Codec<
  InitializePoolInstructionDataArgs,
  InitializePoolInstructionData
> {
  return combineCodec(
    getInitializePoolInstructionDataEncoder(),
    getInitializePoolInstructionDataDecoder()
  );
}

export type InitializePoolAsyncInput<
  TAccountSigner extends string = string,
  TAccountPool extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  pool?: Address<TAccountPool>;
  systemProgram?: Address<TAccountSystemProgram>;
  poolId: InitializePoolInstructionDataArgs['poolId'];
  description: InitializePoolInstructionDataArgs['description'];
  poolStart: InitializePoolInstructionDataArgs['poolStart'];
  poolEnd: InitializePoolInstructionDataArgs['poolEnd'];
};

export async function getInitializePoolInstructionAsync<
  TAccountSigner extends string,
  TAccountPool extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: InitializePoolAsyncInput<
    TAccountSigner,
    TAccountPool,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializePoolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPool,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getU64Encoder().encode(expectSome(args.poolId))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializePoolInstructionDataEncoder().encode(
      args as InitializePoolInstructionDataArgs
    ),
  } as InitializePoolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPool,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializePoolInput<
  TAccountSigner extends string = string,
  TAccountPool extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  pool: Address<TAccountPool>;
  systemProgram?: Address<TAccountSystemProgram>;
  poolId: InitializePoolInstructionDataArgs['poolId'];
  description: InitializePoolInstructionDataArgs['description'];
  poolStart: InitializePoolInstructionDataArgs['poolStart'];
  poolEnd: InitializePoolInstructionDataArgs['poolEnd'];
};

export function getInitializePoolInstruction<
  TAccountSigner extends string,
  TAccountPool extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: InitializePoolInput<
    TAccountSigner,
    TAccountPool,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePoolInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountPool,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializePoolInstructionDataEncoder().encode(
      args as InitializePoolInstructionDataArgs
    ),
  } as InitializePoolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPool,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializePoolInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    pool: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializePoolInstructionData;
};

export function parseInitializePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      pool: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializePoolInstructionDataDecoder().decode(instruction.data),
  };
}
