/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VOTER_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  24, 202, 161, 124, 196, 184, 105, 236,
]);

export function getVoterAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VOTER_ACCOUNT_DISCRIMINATOR
  );
}

export type VoterAccount = {
  discriminator: ReadonlyUint8Array;
  voterPubkey: Address;
  pollId: bigint;
  chosenCandidate: Address;
  timestamp: bigint;
};

export type VoterAccountArgs = {
  voterPubkey: Address;
  pollId: number | bigint;
  chosenCandidate: Address;
  timestamp: number | bigint;
};

export function getVoterAccountEncoder(): FixedSizeEncoder<VoterAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['voterPubkey', getAddressEncoder()],
      ['pollId', getU64Encoder()],
      ['chosenCandidate', getAddressEncoder()],
      ['timestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VOTER_ACCOUNT_DISCRIMINATOR })
  );
}

export function getVoterAccountDecoder(): FixedSizeDecoder<VoterAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['voterPubkey', getAddressDecoder()],
    ['pollId', getU64Decoder()],
    ['chosenCandidate', getAddressDecoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getVoterAccountCodec(): FixedSizeCodec<
  VoterAccountArgs,
  VoterAccount
> {
  return combineCodec(getVoterAccountEncoder(), getVoterAccountDecoder());
}

export function decodeVoterAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VoterAccount, TAddress>;
export function decodeVoterAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VoterAccount, TAddress>;
export function decodeVoterAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VoterAccount, TAddress> | MaybeAccount<VoterAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoterAccountDecoder()
  );
}

export async function fetchVoterAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VoterAccount, TAddress>> {
  const maybeAccount = await fetchMaybeVoterAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoterAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VoterAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoterAccount(maybeAccount);
}

export async function fetchAllVoterAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VoterAccount>[]> {
  const maybeAccounts = await fetchAllMaybeVoterAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoterAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VoterAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVoterAccount(maybeAccount));
}

export function getVoterAccountSize(): number {
  return 88;
}
