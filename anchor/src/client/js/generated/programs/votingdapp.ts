/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedGreetInstruction,
  type ParsedInitializeCandidateInstruction,
  type ParsedInitializePoolInstruction,
  type ParsedVoteInstruction,
} from '../instructions';

export const VOTINGDAPP_PROGRAM_ADDRESS =
  'JAVuBXeBZqXNtS73azhBDAoYaaAFfo4gWXoZe2e7Jf8H' as Address<'JAVuBXeBZqXNtS73azhBDAoYaaAFfo4gWXoZe2e7Jf8H'>;

export enum VotingdappAccount {
  CandidateAccount,
  PollAccount,
}

export function identifyVotingdappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingdappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 203, 73, 43, 203, 170, 96, 121])
      ),
      0
    )
  ) {
    return VotingdappAccount.CandidateAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 254, 117, 41, 232, 74, 172, 45])
      ),
      0
    )
  ) {
    return VotingdappAccount.PollAccount;
  }
  throw new Error(
    'The provided account could not be identified as a votingdapp account.'
  );
}

export enum VotingdappInstruction {
  Greet,
  InitializeCandidate,
  InitializePool,
  Vote,
}

export function identifyVotingdappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingdappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 194, 3, 150, 228, 58, 181, 62])
      ),
      0
    )
  ) {
    return VotingdappInstruction.Greet;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([210, 107, 118, 204, 255, 97, 112, 26])
      ),
      0
    )
  ) {
    return VotingdappInstruction.InitializeCandidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 180, 10, 172, 84, 174, 232, 40])
      ),
      0
    )
  ) {
    return VotingdappInstruction.InitializePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 110, 155, 23, 136, 126, 172, 25])
      ),
      0
    )
  ) {
    return VotingdappInstruction.Vote;
  }
  throw new Error(
    'The provided instruction could not be identified as a votingdapp instruction.'
  );
}

export type ParsedVotingdappInstruction<
  TProgram extends string = 'JAVuBXeBZqXNtS73azhBDAoYaaAFfo4gWXoZe2e7Jf8H',
> =
  | ({
      instructionType: VotingdappInstruction.Greet;
    } & ParsedGreetInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.InitializeCandidate;
    } & ParsedInitializeCandidateInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.InitializePool;
    } & ParsedInitializePoolInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.Vote;
    } & ParsedVoteInstruction<TProgram>);
